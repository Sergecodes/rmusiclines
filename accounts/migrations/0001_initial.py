# Generated by Django 3.2.9 on 2022-01-09 03:07

import accounts.managers
import accounts.models.artists.operations
import accounts.models.users.operations
import accounts.validators
import core.utils
import datetime
from django.conf import settings
from django.contrib.postgres.operations import CreateCollation
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import easy_thumbnails.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('accounts', 'initial'),
    ]

    operations = [
        CreateCollation(
            'accounts\".\"case_insensitive',
            provider='icu',
            locale='und-u-ks-level2',
            deterministic=False
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(db_collation='accounts"."case_insensitive', error_messages={'unique': 'A user with that username already exists.'}, help_text='Your username should be less than 15 characters and may contain only letters, numbers and underscores; no other chareacters are allowed.', max_length=15, validators=[accounts.validators.UserUsernameValidator()], verbose_name='Username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='We will send a verification code to this email', max_length=50, unique=True, verbose_name='Email address')),
                ('display_name', models.CharField(max_length=50, verbose_name='Full name')),
                ('country', django_countries.fields.CountryField(max_length=2, verbose_name='Location')),
                ('birth_date', models.DateField(verbose_name='Date of birth')),
                ('bio', models.CharField(blank=True, help_text='Write about yourself & taste for music. You may include your favorite artists or songs.', max_length=150, verbose_name='Bio')),
                ('profile_picture', easy_thumbnails.fields.ThumbnailerImageField(blank=True, height_field='profile_picture_height', upload_to='profile_pictures/', validators=[django.core.validators.FileExtensionValidator(['png, jpg'])], width_field='profile_picture_width')),
                ('cover_photo', easy_thumbnails.fields.ThumbnailerImageField(blank=True, height_field='cover_photo_height', upload_to='cover_photos/', width_field='cover_photo_width')),
                ('profile_picture_width', models.PositiveIntegerField(default=0)),
                ('profile_picture_height', models.PositiveIntegerField(default=0)),
                ('cover_photo_width', models.PositiveIntegerField(default=0)),
                ('cover_photo_height', models.PositiveIntegerField(default=0)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('N/B', 'Non-binary')], default='M', max_length=3, verbose_name='Gender')),
                ('joined_on', models.DateTimeField(auto_now_add=True, verbose_name='Date joined')),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_mod', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('verified_on', models.DateTimeField(blank=True, editable=False, null=True)),
                ('deactivated_on', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_changed_username_on', models.DateTimeField(blank=True, editable=False, null=True)),
                ('num_followers', models.PositiveIntegerField(default=0)),
                ('num_following', models.PositiveIntegerField(default=0)),
                ('num_artist_posts', models.PositiveIntegerField(default=0)),
                ('num_non_artist_posts', models.PositiveIntegerField(default=0)),
                ('num_parent_artist_post_comments', models.PositiveIntegerField(default=0)),
                ('num_parent_non_artist_post_comments', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'accounts"."user',
            },
            bases=(models.Model, accounts.models.users.operations.UserOperations, core.utils.UsesCustomSignal),
            managers=[
                ('objects', accounts.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(editable=False, max_length=80, unique=True)),
                ('country', django_countries.fields.CountryField(max_length=2, verbose_name='Country of origin')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('N/B', 'Non-binary')], default='M', max_length=3, verbose_name='Gender')),
                ('birth_date', models.DateField(verbose_name='Date of birth')),
                ('num_followers', models.PositiveIntegerField(default=0, editable=False)),
                ('num_posts', models.PositiveIntegerField(default=0, editable=False)),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='Added on')),
            ],
            options={
                'db_table': 'accounts"."artist',
                'ordering': ['name'],
            },
            bases=(models.Model, accounts.models.artists.operations.ArtistOperations),
        ),
        migrations.CreateModel(
            name='ArtistTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(allow_unicode=True, editable=False, max_length=100, unique=True)),
            ],
            options={
                'db_table': 'accounts"."artist_tag',
            },
            bases=(models.Model, accounts.models.artists.operations.ArtistTagOperations),
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_on', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(db_column='follower_user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(db_column='followed_user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts"."user_follow',
            },
        ),
        migrations.CreateModel(
            name='UserBlocking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked_on', models.DateTimeField(auto_now_add=True)),
                ('blocked', models.ForeignKey(db_column='blocked_user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('blocker', models.ForeignKey(db_column='blocker_user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts"."user_blocking',
            },
        ),
        migrations.CreateModel(
            name='TaggedArtist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(db_column='artist_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='accounts.artist')),
                ('tag', models.ForeignKey(db_column='artist_tag_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='accounts.artisttag')),
            ],
            options={
                'db_table': 'accounts"."artist_with_tag',
            },
        ),
        migrations.CreateModel(
            name='Suspension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('given_on', models.DateTimeField(auto_now_add=True)),
                ('duration', models.DurationField(default=datetime.timedelta(days=1))),
                ('reason', models.TextField(blank=True)),
                ('over_on', models.DateTimeField()),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='suspensions', related_query_name='suspension', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts"."suspension',
            },
            bases=(models.Model, accounts.models.users.operations.SuspensionOperations, core.utils.UsesCustomSignal),
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_settings', models.JSONField(default=dict)),
                ('site_settings', models.JSONField(default=dict)),
                ('mentions_settings', models.JSONField(default=dict)),
                ('email_settings', models.JSONField(default=dict)),
                ('user', models.OneToOneField(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='settings', related_query_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Settings',
                'verbose_name_plural': 'Settings',
                'db_table': 'accounts"."settings',
            },
        ),
        migrations.CreateModel(
            name='ArtistPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', easy_thumbnails.fields.ThumbnailerImageField(height_field='photo_height', upload_to='artists_photos/', validators=[django.core.validators.FileExtensionValidator(['png, jpg, gif'])], width_field='photo_width')),
                ('photo_width', models.PositiveIntegerField()),
                ('photo_height', models.PositiveIntegerField()),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
                ('artist', models.ForeignKey(db_column='artist_id', on_delete=django.db.models.deletion.CASCADE, related_name='photos', related_query_name='photo', to='accounts.artist')),
            ],
            options={
                'db_table': 'accounts"."artist_photo',
                'ordering': ['-uploaded_on'],
            },
        ),
        migrations.CreateModel(
            name='ArtistFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_on', models.DateTimeField(auto_now_add=True)),
                ('artist', models.ForeignKey(db_column='artist_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='accounts.artist')),
                ('follower', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts"."artist_follow',
            },
        ),
        migrations.AddField(
            model_name='artist',
            name='followers',
            field=models.ManyToManyField(related_name='following_artists', related_query_name='following_artist', through='accounts.ArtistFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='artist',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='artists', through='accounts.TaggedArtist', to='accounts.ArtistTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='user',
            name='blocked_users',
            field=models.ManyToManyField(related_name='blocked_by', related_query_name='blocked_user', through='accounts.UserBlocking', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='followers',
            field=models.ManyToManyField(related_name='following', related_query_name='following_user', through='accounts.UserFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
    ]
