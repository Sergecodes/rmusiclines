# Generated by Django 3.2.9 on 2021-12-23 03:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import shortuuid.django_fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ArtistPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', shortuuid.django_fields.ShortUUIDField(alphabet=None, length=20, max_length=24, prefix='', unique=True, verbose_name='UUID')),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en', max_length=7, verbose_name='Language')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('num_stars', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of stars')),
                ('num_bookmarks', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of bookmarks')),
                ('num_views', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of views')),
                ('num_downloads', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of downloads')),
                ('num_simple_reposts', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of reposts without a comment')),
                ('num_comment_reposts', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of reposts with a comment')),
                ('music_title', models.CharField(max_length=50, verbose_name='Music title')),
                ('artist', models.ForeignKey(db_column='artist_id', on_delete=django.db.models.deletion.CASCADE, related_name='posts', related_query_name='post', to='accounts.artist', verbose_name='Artist')),
            ],
            options={
                'db_table': 'posts"."artist_post',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='ArtistPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('num_likes', models.PositiveIntegerField(default=0, editable=False)),
            ],
            options={
                'db_table': 'posts"."artist_post_comment',
            },
        ),
        migrations.CreateModel(
            name='HashtaggedNonArtistPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'posts"."non_artist_post_with_hashtag',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', shortuuid.django_fields.ShortUUIDField(alphabet=None, length=20, max_length=24, prefix='', unique=True, verbose_name='UUID')),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='en', max_length=7, verbose_name='Language')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('num_stars', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of stars')),
                ('num_bookmarks', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of bookmarks')),
                ('num_views', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of views')),
                ('num_downloads', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of downloads')),
                ('num_simple_reposts', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of reposts without a comment')),
                ('num_comment_reposts', models.PositiveIntegerField(default=0, editable=False, verbose_name='Number of reposts with a comment')),
            ],
            options={
                'db_table': 'posts"."non_artist_post',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('num_likes', models.PositiveIntegerField(default=0, editable=False)),
            ],
            options={
                'db_table': 'posts"."non_artist_post_comment',
            },
        ),
        migrations.CreateModel(
            name='PostHashtag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('topic', models.CharField(max_length=50, unique=True, verbose_name='topic')),
                ('slug', models.SlugField(editable=False, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Post Hashtag',
                'verbose_name_plural': 'Post Hashtags',
                'db_table': 'posts"."post_hashtag',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='')),
                ('post', models.OneToOneField(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='video', related_query_name='video', to='posts.nonartistpost')),
            ],
            options={
                'db_table': 'posts"."non_artist_post_video',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostRepost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True)),
                ('reposted_on', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='reposts', related_query_name='repost', to='posts.nonartistpost')),
                ('reposter', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='non_artist_post_reposts', related_query_name='non_artist_post_repost', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."non_artist_post_repost',
                'ordering': ['-reposted_on'],
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_stars', models.PositiveIntegerField(default=0, editable=False)),
                ('rated_on', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', related_query_name='rating', to='posts.nonartistpost')),
                ('rater', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='non_artist_post_ratings', related_query_name='non_artist_post_rating', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."non_artist_post_rating',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(height_field='photo_height', upload_to='', verbose_name='Photo', width_field='photo_width')),
                ('photo_width', models.PositiveIntegerField(verbose_name='Photo width')),
                ('photo_height', models.PositiveIntegerField(verbose_name='Photo height')),
                ('post', models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='photos', related_query_name='photo', to='posts.nonartistpost', verbose_name='Post')),
            ],
            options={
                'db_table': 'posts"."non_artist_post_photo',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostMention',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.nonartistpost')),
                ('user_mentioned', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."non_artist_post_user_mention',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downloaded_on', models.DateTimeField(auto_now_add=True)),
                ('downloader', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='non_artist_post_downloads', related_query_name='non_artist_post_download', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.nonartistpost')),
            ],
            options={
                'db_table': 'posts"."non_artist_post_download',
            },
        ),
        migrations.CreateModel(
            name='NonArtistPostCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked_on', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(db_column='non_artist_post_comment_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.nonartistpostcomment')),
                ('liker', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."non_artist_post_comment_like',
            },
        ),
        migrations.AddField(
            model_name='nonartistpostcomment',
            name='likers',
            field=models.ManyToManyField(related_name='liked_non_artist_post_comments', related_query_name='liked_non_artist_post_comment', through='posts.NonArtistPostCommentLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonartistpostcomment',
            name='post',
            field=models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='posts.nonartistpost'),
        ),
        migrations.AddField(
            model_name='nonartistpostcomment',
            name='poster',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='non_artist_post_comments', related_query_name='non_artist_post_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='NonArtistPostBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bookmarked_on', models.DateTimeField(auto_now_add=True)),
                ('bookmarker', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.nonartistpost')),
            ],
            options={
                'db_table': 'posts"."non_artist_post_bookmark',
            },
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='bookmarkers',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_non_artist_posts', related_query_name='bookmarked_non_artist_post', through='posts.NonArtistPostBookmark', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='downloaders',
            field=models.ManyToManyField(blank=True, related_name='downloaded_non_artist_posts', related_query_name='downloaded_non_artist_post', through='posts.NonArtistPostDownload', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='hashtags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='non_artist_posts', through='posts.HashtaggedNonArtistPost', to='posts.PostHashtag', verbose_name='Hashtags'),
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='poster',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='non_artist_posts', related_query_name='non_artist_post', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='raters',
            field=models.ManyToManyField(blank=True, related_name='rated_non_artist_posts', related_query_name='rated_non_artist_post', through='posts.NonArtistPostRating', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='reposters',
            field=models.ManyToManyField(blank=True, related_name='reposted_non_artist_posts', related_query_name='reposted_non_artist_post', through='posts.NonArtistPostRepost', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nonartistpost',
            name='users_mentioned',
            field=models.ManyToManyField(blank=True, related_name='mentioned_in_non_artist_posts', related_query_name='mentioned_in_non_artist_post', through='posts.NonArtistPostMention', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='hashtaggednonartistpost',
            name='content_object',
            field=models.ForeignKey(db_column='non_artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.nonartistpost'),
        ),
        migrations.AddField(
            model_name='hashtaggednonartistpost',
            name='tag',
            field=models.ForeignKey(db_column='post_hashtag_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.posthashtag'),
        ),
        migrations.CreateModel(
            name='HashtaggedArtistPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.artistpost')),
                ('tag', models.ForeignKey(db_column='post_hashtag_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.posthashtag')),
            ],
            options={
                'db_table': 'posts"."artist_post_with_hashtag',
            },
        ),
        migrations.CreateModel(
            name='ArtistPostVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='', verbose_name='Video')),
                ('post', models.OneToOneField(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='video', related_query_name='video', to='posts.artistpost', verbose_name='Post')),
            ],
            options={
                'db_table': 'posts"."artist_post_video',
            },
        ),
        migrations.CreateModel(
            name='ArtistPostRepost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True)),
                ('reposted_on', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='reposts', related_query_name='repost', to='posts.artistpost')),
                ('reposter', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='artist_post_reposts', related_query_name='artist_post_repost', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."artist_post_repost',
                'ordering': ['-reposted_on'],
            },
        ),
        migrations.CreateModel(
            name='ArtistPostRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_stars', models.PositiveIntegerField(default=0, editable=False)),
                ('rated_on', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', related_query_name='rating', to='posts.artistpost')),
                ('rater', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='artist_post_ratings', related_query_name='artist_post_rating', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."artist_post_rating',
            },
        ),
        migrations.CreateModel(
            name='ArtistPostPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(height_field='photo_height', upload_to='', verbose_name='Photo', width_field='photo_width')),
                ('photo_width', models.PositiveIntegerField(verbose_name='Photo width')),
                ('photo_height', models.PositiveIntegerField(verbose_name='Photo height')),
                ('post', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='photos', related_query_name='photo', to='posts.artistpost', verbose_name='Post')),
            ],
            options={
                'db_table': 'posts"."artist_post_photo',
            },
        ),
        migrations.CreateModel(
            name='ArtistPostMention',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.artistpost')),
                ('user_mentioned', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."artist_post_user_mention',
            },
        ),
        migrations.CreateModel(
            name='ArtistPostDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downloaded_on', models.DateTimeField(auto_now_add=True)),
                ('downloader', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='artist_post_downloads', related_query_name='artist_post_download', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.artistpost')),
            ],
            options={
                'db_table': 'posts"."artist_post_download',
            },
        ),
        migrations.CreateModel(
            name='ArtistPostCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked_on', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(db_column='artist_post_comment_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.artistpostcomment')),
                ('liker', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts"."artist_post_comment_like',
            },
        ),
        migrations.AddField(
            model_name='artistpostcomment',
            name='likers',
            field=models.ManyToManyField(related_name='liked_artist_post_comments', related_query_name='liked_artist_post_comment', through='posts.ArtistPostCommentLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='artistpostcomment',
            name='post',
            field=models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='posts.artistpost'),
        ),
        migrations.AddField(
            model_name='artistpostcomment',
            name='poster',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='artist_post_comments', related_query_name='artist_post_comment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ArtistPostBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bookmarked_on', models.DateTimeField(auto_now_add=True)),
                ('bookmarker', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='artist_post_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='posts.artistpost')),
            ],
            options={
                'db_table': 'posts"."artist_post_bookmark',
            },
        ),
        migrations.AddField(
            model_name='artistpost',
            name='bookmarkers',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_artist_posts', related_query_name='bookmarked_artist_post', through='posts.ArtistPostBookmark', to=settings.AUTH_USER_MODEL, verbose_name='Bookmarkers'),
        ),
        migrations.AddField(
            model_name='artistpost',
            name='downloaders',
            field=models.ManyToManyField(blank=True, related_name='downloaded_artist_posts', related_query_name='downloaded_artist_post', through='posts.ArtistPostDownload', to=settings.AUTH_USER_MODEL, verbose_name='Downloaders'),
        ),
        migrations.AddField(
            model_name='artistpost',
            name='hashtags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='artist_posts', through='posts.HashtaggedArtistPost', to='posts.PostHashtag', verbose_name='Hashtags'),
        ),
        migrations.AddField(
            model_name='artistpost',
            name='poster',
            field=models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='artist_posts', related_query_name='artist_post', to=settings.AUTH_USER_MODEL, verbose_name='Poster'),
        ),
        migrations.AddField(
            model_name='artistpost',
            name='raters',
            field=models.ManyToManyField(blank=True, related_name='rated_artist_posts', related_query_name='rated_artist_post', through='posts.ArtistPostRating', to=settings.AUTH_USER_MODEL, verbose_name='Raters'),
        ),
        migrations.AddField(
            model_name='artistpost',
            name='reposters',
            field=models.ManyToManyField(blank=True, related_name='reposted_artist_posts', related_query_name='reposted_artist_post', through='posts.ArtistPostRepost', to=settings.AUTH_USER_MODEL, verbose_name='Reposter'),
        ),
        migrations.AddField(
            model_name='artistpost',
            name='users_mentioned',
            field=models.ManyToManyField(blank=True, related_name='mentioned_in_artist_posts', related_query_name='mentioned_in_artist_post', through='posts.ArtistPostMention', to=settings.AUTH_USER_MODEL, verbose_name='Users mentioned'),
        ),
        migrations.AddConstraint(
            model_name='nonartistpostrepost',
            constraint=models.UniqueConstraint(fields=('post', 'reposter'), name='unique_non_artist_post_repost'),
        ),
        migrations.AddConstraint(
            model_name='nonartistpostrating',
            constraint=models.UniqueConstraint(fields=('post', 'rater'), name='unique_non_artist_post_rating'),
        ),
        migrations.AddConstraint(
            model_name='nonartistpostmention',
            constraint=models.UniqueConstraint(fields=('post', 'user_mentioned'), name='unique_non_artist_post_user_mention'),
        ),
        migrations.AddConstraint(
            model_name='nonartistpostcommentlike',
            constraint=models.UniqueConstraint(fields=('comment', 'liker'), name='unique_non_artist_post_comment_like'),
        ),
        migrations.AddConstraint(
            model_name='nonartistpostbookmark',
            constraint=models.UniqueConstraint(fields=('post', 'bookmarker'), name='unique_non_artist_post_bookmark'),
        ),
        migrations.AddIndex(
            model_name='nonartistpost',
            index=models.Index(fields=['-created_on'], name='non_artist_post_desc_idx'),
        ),
        migrations.AddConstraint(
            model_name='artistpostrepost',
            constraint=models.UniqueConstraint(fields=('post', 'reposter'), name='unique_artist_post_repost'),
        ),
        migrations.AddConstraint(
            model_name='artistpostrating',
            constraint=models.UniqueConstraint(fields=('post', 'rater'), name='unique_artist_post_rating'),
        ),
        migrations.AddConstraint(
            model_name='artistpostmention',
            constraint=models.UniqueConstraint(fields=('post', 'user_mentioned'), name='unique_artist_post_user_mention'),
        ),
        migrations.AddConstraint(
            model_name='artistpostcommentlike',
            constraint=models.UniqueConstraint(fields=('comment', 'liker'), name='unique_artist_post_comment_like'),
        ),
        migrations.AddConstraint(
            model_name='artistpostbookmark',
            constraint=models.UniqueConstraint(fields=('post', 'bookmarker'), name='unique_artist_post_bookmark'),
        ),
        migrations.AddIndex(
            model_name='artistpost',
            index=models.Index(fields=['-created_on'], name='artist_post_desc_idx'),
        ),
    ]
